hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, dim(mtx)[1], dim(mtx)[2])
for( i in 1 : dim(mtx)[1]) {
for(j in i + 1 : dim(mtx)[1]) {
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j])
}
}
result
}
e
g
hammingMatrix(g)
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, dim(mtx)[1], dim(mtx)[1])
for( i in 1 : dim(mtx)[1]) {
for(j in i + 1 : dim(mtx)[1]) {
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j])
}
}
result
}
hammingMatrix(g)
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : dim(mtx)[1]) {
for(j in i + 1 : dim(mtx)[1]) {
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
result
}
hammingMatrix(g)
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : dim(mtx)[1] - 1) {
for(j in i + 1 : dim(mtx)[1]) {
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
result
}
hammingMatrix(g)
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : dim(mtx)[1] - 1) {
for(j in i + 1 : dim(mtx)[1]) {
print(j)
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
result
}
hammingMatrix(g)
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : dim(mtx)[1] - 1) {
for(j in i + 1 : dim(mtx)[1]) {
print(c(i, j)
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
result
}
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : dim(mtx)[1] - 1) {
for(j in i + 1 : dim(mtx)[1]) {
print(c(i, j))
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
result
}
hammingMatrix(g)
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : (dim(mtx)[1] - 1) ){
for(j in (i + 1) : dim(mtx)[1]) {
print(c(i, j))
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
result
}
hammingMatrix(g)
as.dist(hammingMatrix)
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : (dim(mtx)[1] - 1) ){
for(j in (i + 1) : dim(mtx)[1]) {
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
result
}
as.dist(hammingMatrix)
as.dist(hammingMatrix(g))
k = as.dist(hammingMatrix(g))
hclust(k)
e = replicate(3, sample(1 : 3, size = 10, replcate = TRUE))
e = replicate(3, sample(1 : 3, size = 10, replace = TRUE))
e
e = c(e,e)
e
e = matrix(e, ncol = 6)
e
e = t(e)
f = hammingMatrix(e)
f = as.dist(f)
f
hclust(f)
g = hclust(f)
g = cutree(g, k= 3)
g
heatmap(e)
se
e
g = apply(e, MARGIN=1, discretizationZScore, 3)
g
hammingDistance(g)
hammingMatrix(g)
discretizationZScore(e[1,], 3)
e[1,]
(e[1,] - mean(e[1,]))/ (sd(e[1,]))
b = (e[1,] - mean(e[1,]))/ (sd(e[1,]))
b
pnorm(b)
pnorm(b) * 3
floor(pnorm(b) * 3)
discretizationZScore = function(vec, numOfStates = 3) {
sdVec = sd(vec);
meanVec = mean(vec);
(vec - meanVec) / sdVec;
floor( pnorm(vec) * numOfStates);
}
g = apply(e, MARGIN=1, discretizationZScore)
g
hammingMatrix = function(mtx) {
hammingDistance = function(vec1, vec2) {
sum(as.integer(vec1) != as.integer(vec2))
}
result = matrix(0, nrow = dim(mtx)[1], ncol = dim(mtx)[1])
for( i in 1 : (dim(mtx)[1] - 1) ){
for(j in (i + 1) : dim(mtx)[1]) {
result[i,j] = result[j,i] = hammingDistance(mtx[i,], mtx[j,])
}
}
as.dist(result)
}
a = replicate(3, sample(1 :2, size = 5, replace= T))
hammingMatrix(a)
a
normalizationLinear = function(vec) {
minVec = min(vec);
maxVec = max(vec);
(vec - minVec)/ (maxVec - minVec);
}
discretizationFloor = function(vec, numOfStates = 3) {
vec = normalizationLinear(vec);
vec = floor(vec * numOfStates);
vec[vec == numOfStates] = numOfStates - 1;
vec;
}
a = 1 : 10
discretizationFloor(a)
a = 1 : 11
discretizationFloor(a)
a = 1 : 12
discretizationFloor(a)
a = 1  : 10000
hist(discretizationFloor(a))
?data
numOfFeatures = 100;
numOfSamples = 100;
numOfClusters = 5;
sourceData = matrix(numOfSamples * numOfFeatures, nrow = numOfFeatures);
centers = matrix(numOfClusters * numOfFeatures, nrow = numOfFeatures);
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
View(sourceData)
View(sourceData)
numOfFeatures = 100;
numOfSamples = 100;
numOfClusters = 5;
sourceData = matrix(0,ncol = numOfSamples, nrow = numOfFeatures);
centers = matrix(0, ncol = numOfClusters, nrow = numOfFeatures);
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
View(centers)
View(centers)
random
a = 1: 10
b = rnorm(a)
b
b= rnorm(length(a), mean = a)
b
numOfFeatures = 100;
numOfSamples = 100;
numOfClusters = 5;
stdev = 0.1
sourceData = matrix(0,ncol = numOfSamples, nrow = numOfFeatures);
centers = matrix(0, ncol = numOfClusters, nrow = numOfFeatures);
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
for ( i in 1 : numOfSamples) {
sourceData[,i] = rnorm(numOfFeatures, mean = centers[,sample(1 : numOfClusters,size = 1)], stdev);
}
sourceData
distance  = dist(sourceData)
fit = dist(distance)
heatmap(distance)
heatmap(sourceData)
set.seed(1024)
numOfFeatures = 100;
numOfSamples = 100;
numOfClusters = 5;
stdev = 0.3
sourceData = matrix(0,ncol = numOfSamples, nrow = numOfFeatures);
centers = matrix(0, ncol = numOfClusters, nrow = numOfFeatures);
labels = 1 : numOfSamples;
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
for ( i in 1 : numOfSamples) {
labels[i] = sample(1 : numOfClusters,size = 1);
sourceData[,i] = rnorm(numOfFeatures, mean = centers[,labels[i]], stdev);
}
heatmap(sourceData)
set.seed(1024)
numOfFeatures = 100;
numOfSamples = 100;
numOfClusters = 5;
stdev = 0.6
sourceData = matrix(0,ncol = numOfSamples, nrow = numOfFeatures);
centers = matrix(0, ncol = numOfClusters, nrow = numOfFeatures);
labels = 1 : numOfSamples;
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
for ( i in 1 : numOfSamples) {
labels[i] = sample(1 : numOfClusters,size = 1);
sourceData[,i] = rnorm(numOfFeatures, mean = centers[,labels[i]], stdev);
}
heatmap(sourceData)
set.seed(1024)
generateData = function(numOfFeatures = 100,numOfSamples = 100, numOfClusters = 5, stdev = 0.6) {
sourceData = matrix(0,ncol = numOfSamples, nrow = numOfFeatures);
centers = matrix(0, ncol = numOfClusters, nrow = numOfFeatures);
labels = 1 : numOfSamples;
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
for ( i in 1 : numOfSamples) {
labels[i] = sample(1 : numOfClusters,size = 1);
sourceData[,i] = rnorm(numOfFeatures, mean = centers[,labels[i]], stdev);
}
sourceData
}
heatmap(generateData(stdev = 1))
set.seed(1024)
generateData = function(numOfFeatures = 100,numOfSamples = 100, numOfClusters = 5, stdev = 0.6) {
sourceData = matrix(0,ncol = numOfSamples, nrow = numOfFeatures);
centers = matrix(0, ncol = numOfClusters, nrow = numOfFeatures);
labels = 1 : numOfSamples;
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
for ( i in 1 : numOfSamples) {
labels[i] = sample(1 : numOfClusters,size = 1);
sourceData[,i] = rnorm(numOfFeatures, mean = centers[,labels[i]], stdev);
}
sourceData
}
heatmap(generateData(stdev = 1.5))
library(ggplot2)
?theme
a = rnorm(1000)
b = rnorm(1000, mean = 10, sd=3)
plot(a + b)
hist(a + b)
hist(a)
hist(b)
pnorm(1)
pnorm(0.6)
qnorm(0.9)
qnor(0.95)
qnorm(0.95)
qnorm(0.975)
qnorm(p=0.9, mean= 2100, sd=300)
qnorm(p= 0.1, mean = 21, sd = 5)
a = rnorm(100)
qqplot(a)
a
qqplot(x=a, y = rnorm(100))
a = rnorm(10000)
qqplot(x=a, y = rnorm(10000))
abline(0,1)
qqplot(x=rnorm(20000), y = rnorm(20000))
qqplot(x=rnorm(200000), y = rnorm(200000))
abline(0,1)
abline(0,1)
pnorm(-1)
a = 1 :100
pplot(a,b)
qqplot(a,b)
qqplot(a,a)
qnorm(50, mean = 45, sd = 3.2)
qnorm(p = 50, mean = 45, sd = 3.2)
qnorm(p=50, mean= 45, sd=3.2)
pnorm(p=50, mean= 45, sd=3.2)
pnorm(50, mean= 45, sd=3.2)
pnorm
?pnorm
qnorm(p = 0.2, mean = 77, sd = 5)
pbinom(q=8, size=10,prob=0.13)
?pbinom
dbinom(q=8, size=10,prob=0.13)
dbinom(8, size=10,prob=0.13)
sqrt(1000*0.262*0.738)
pbinom(230,size=1000, prob=0.262 )
pbinom(300,size=1000, prob=0.262 )
a  = rbinom(n=100,size=10, p= 0.25)
hist(a)
a  = rbinom(n=10000,size=10, p= 0.25)
hist(a)
a  = rbinom(n=1000000,size=10, p= 0.25)
hist(a)
a  = rbinom(n=1000000,size=10, p= 0.25)
hist(a)
pbinom(size = 245, p=0.25, q=70)
1 - pbinom(size = 245, p=0.25, q=70)
1 - pnorm(q = 70, mean = 245 * 0.25, sd=sqrt(245*0.25*0.75))
1 - pbinom(size = 245, p=0.25, q=72)
1 - pbinom(size = 245, p=0.25, q=71)
1 - pbinom(size = 245, p=0.25, q=69)
dbinom(2, 10, 0.56)
dnbinom(2, 3, 0.51)
dbinom(2, 3, 0.51)
1 - pnorm(34, 24,4)
(0.3*0.5)/(0.7*0.25+0.3*0.5)
m = 0.28*160
s = sqrt(m * 0.72)
1 - pnorm(50, m, s)
load(url("http://www.openintro.org/stat/data/kobe.RData"))
colnames(kobe)
sum(kobe$basket == H)
sum(kobe$basket == "H")
sum(kobe$basket == "H")/ length(kobe$basket)
calc_streak(kobe$basket)
bar(calc_streak(kobe$basket))
barplot(calc_streak(kobe$basket))
kobe_streak = calc_streak(kobe$basket)
barplot(table(kobe_streak))
hist(kobe_streak)
quantile(x=0.25)
quantile(x=0.25, kobe_streak)
quantile(kobe_streak,0.25)
quantile(kobe_streak,0.75)
sample(1: 2,size=100,replace=TRUE,prob=c(0.2,0.8))
a = replicate(10, rnorm(10))
cov(a)
a = replicate(4, rnorm(5))
cov(a)
a
numOfClusters = 5
sd = 3
states = 3 :5
generateData = function(numOfFeatures = 100,numOfSamples = 40, numOfClusters = 5, stdev = 0.6) {
result = matrix(0,ncol = numOfSamples, nrow = numOfFeatures);
centers = matrix(0, ncol = numOfClusters, nrow = numOfFeatures);
labels = 1 : numOfSamples;
for(i in 1 : numOfFeatures) {
centers[i,] = sample(1 : numOfClusters)
}
for ( i in 1 : numOfSamples) {
labels[i] = sample(1 : numOfClusters,size = 1);
result[,i] = rnorm(numOfFeatures, mean = centers[,labels[i]], stdev);
}
colnames(result) = labels;
result;
}
a = generateData
a = generateData()
cov(a)
b =cov(a)
plot(b[1,])
plot(b[2,])
plot(b[4,])
b[4,]
b =cov(t(a)
)
plot(b[4,])
b[4,]
a = replicate(5, rnorm(10))
a
a = apply(a, MARGIN=2, functuon(vec) ((vec - min(vec))/(max(vec) - min(vec))))
a = apply(a, MARGIN=2, function(vec) ((vec - min(vec))/(max(vec) - min(vec))))
a
a = apply(a, MARGIN=2, function(vec, num) (floor((vec - min(vec))/(max(vec) - min(vec))) * num, 3)
a = apply(a, MARGIN=2, function(vec, num) (floor((vec - min(vec))/(max(vec) - min(vec)), 3))
)
a = apply(a, MARGIN=2, function(vec, num) (floor((vec - min(vec))/(max(vec) - min(vec)) 3))
a = apply(a, MARGIN=2, function(vec, num) (floor((vec - min(vec))/(max(vec) - min(vec)) ))
)
a
a = apply(a, MARGIN=2, function(vec, num) (floor((vec - min(vec))/(max(vec) - min(vec))*3 ))
)
a
a = replicate(5, rnorm(10))
a = apply(a, MARGIN=2, function(vec) {floor((vec - min(vec))/ (max(vec) - min(vec)) *3)}
)
a
a[a == 3] = 2
a
mtx = matrix(0, ncol = 5, nrow= 3)
for(i in 1 : 3) {
for(j in 1 : 5) {}
}
mtx[1,1] = sum(mtx[,1] == 1)
mtx
sum(mtx[,1] == 1)
mtx[1,] == 1
mtx[,1] == 1
sum(a[,1] == 1)
oneDJury = function(mtx, numOfStates) {
result = matrix(0, ncol = dim(mtx)[2], nrow = numOfStates);
for(r in 1: dim(result)[1]) {
for(c in 1 : dim(result)[2]) {
result[r, c] = sum(mtx[,c] == r);
}
}
result;
}
oneDJury(a, 3)
oneDJury = function(mtx, numOfStates) {
result = matrix(0, ncol = dim(mtx)[2], nrow = numOfStates);
for(r in 1: dim(result)[1]) {
for(c in 1 : dim(result)[2]) {
result[r, c] = sum(mtx[,c] == r - 1);
}
}
result;
}
oneDJury(a, 3)
a = rnorm(30, 10.44, 9.2)
sd(a)
sd(a)
a = rnorm(30, 10.44, 9.2)
sd(a)
a = rnorm(30, 10.44, 9.2)
sd(a)
pnorm(0.95)
pnorm(0.95)
pnorm(0.025)
qnorm(0.025)
dnorm(0.025)
?norm
rnorm
?rnorm
qnorm(0.975)
12* 1.96
(12 * qnorm(0.975))**2
a = (32  - 30.69)/ (4.31 / 6)
a
2 * pnorm(a)
pnorm(4.4)
2 * pnorm(-a)
pnorm(0.975)
qnorm(0.975)
qnorm(0.975) * 220 / 10
43 - 415
9.4/sqrt(507)
setwd()
setwd("D:/thesis/processedData/oneDJury/")
ls
ls()
load("Collins_LUAD_3")
result
load("Collins_Colon_3")
result
load("Collins_PAM_3")
load("Collins_PAM50_3")
result
